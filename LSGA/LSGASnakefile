

configfile: "config.yaml"


rule all:
    input:
        config["Sdatadir"]+"/Multiq_raw_report",
        config["Sdatadir"]+"/Multiq_trimmed_report",
        config["Sdatadir"]+"/trimmomatic_output",
        config["Ldatadir"]+"/Nano_Raw_Report",
        config["Ldatadir"]+"/porechop_output.fastq.gz",
        config["Ldatadir"]+"/Nano_Trimmed_Report",
        config["Ldatadir"]+"/Assemblies/Flye/assembly.fasta",
        config["Ldatadir"]+"/Quast_Results/QA_1",
        config["Ldatadir"]+"/Busco_Results/QA_1",
        config["Ldatadir"]+"/Assemblies/Medaka_Results/consensus.fasta",
        config["Ldatadir"]+"/Quast_Results/QA_2",
        config["Ldatadir"]+"/Busco_Results/QA_2",
        config["Ldatadir"]+"/Assemblies/Pilon_Results",


rule fastq_c:
    input:
        config["Sdatadir"]
    output:
        directory(config["Sdatadir"]+"/quals")
    params:
        qr = "quals"
    threads: 3
    conda:
        "SQTQ.yml"
    script:
        "fastqc.py"




rule multiq_c:
    input:
        config["Sdatadir"]+"/quals"
    params:
        trimmed = False
    output:
        directory(config["Sdatadir"]+"/Multiq_raw_report")
    threads: 1
    conda:
        "SQTQ.yml"
    script:
        "multiqc.py"


rule trimming_s:
    input:
        config["Sdatadir"]
    params:
        leading = config["LEADING"],
        sliding = config["SLIDINGWINDOW"],
        trailing = config["TRAILING"],
        avg = config["AVGQUAL"],
        minlen = config["MINLEN"]
    output:
        directory(config["Sdatadir"]+"/trimmomatic_output")
    threads: 5
    conda:
        "SQTQ.yml"
    script:
        "trimmomatic.py"


rule fastq_c_t:
    input:
         config["Sdatadir"]+"/trimmomatic_output"
    output:
        directory( config["Sdatadir"]+"/tquals")
    params:
        qr = "../tquals"
    threads: 3
    conda:
        "SQTQ.yml"
    script:
        "fastqc.py"


rule multiq_c_t:
    input:
        config["Sdatadir"]+"/tquals"
    params:
        trimmed = True
    output:
        directory(config["Sdatadir"]+"/Multiq_trimmed_report")
    threads: 1
    conda:
        "SQTQ.yml"
    script:
        "multiqc.py"


rule nanoq_c:
    input:
        config["Ldatadir"]
    output:
        directory(config["Ldatadir"]+"/Nano_Raw_Report")
    params:
        Trimmed = False
    threads: 1
    conda:
        "LQTQ.yml"
    script:
        "nanoqc.py"



rule trimming_l:
    input:
        config["Ldatadir"]
    output:
        config["Ldatadir"]+"/porechop_output.fastq.gz"
    threads: 5
    conda:
        "LQTQ.yml"
    script:
        "trim.py"



rule nanoq_c_t:
    input:
         config["Ldatadir"]+"/porechop_output.fastq.gz"
    output:
         directory(config["Ldatadir"]+"/Nano_Trimmed_Report")
    params:
        Trimmed = True
    threads: 1
    conda:
        "LQTQ.yml"
    script:
        "nanoqc.py"


rule FlyeAssGenie:
    input:
        config["Ldatadir"],
        config["Ldatadir"]+"/porechop_output.fastq.gz"
    output:
        config["Ldatadir"]+"/Assemblies/Flye/assembly.fasta"
    conda:
        "FlyeAss.yml"
    threads: 20
    params:
        ShortR = config["Sdatadir"],
        GSE = config["GSE"],
        S = config["Short_Reads"],
    script:
        "FlyeAssGenie.py"


rule QA_1:
    input:
        config["Ldatadir"]+"/Assemblies/Flye/assembly.fasta"
    output:
        directory(config["Ldatadir"]+"/Quast_Results/QA_1"),
        directory(config["Ldatadir"]+"/Busco_Results/QA_1")
    params:
        Lineage = config["LINEAGE"],
        SP = config["SP"]
    threads: 20
    conda:
        "QAssembly.yml"
    script:
        "QAssembly.py"


rule Polish:
    input:
        config["Ldatadir"]+"/Assemblies/Flye/assembly.fasta",
        config["Ldatadir"]+"/porechop_output.fastq.gz"
    output:
        config["Ldatadir"]+"/Assemblies/Medaka_Results/consensus.fasta"
    conda:
        "Polishing.yml"
    threads: 20
    params:
        i = config["ITER"]
    script:
        "Polishing.py"


rule QA_2:
    input:
        config["Ldatadir"]+"/Assemblies/Medaka_Results/consensus.fasta"
    output:
        directory(config["Ldatadir"]+"/Quast_Results/QA_2"),
        directory(config["Ldatadir"]+"/Busco_Results/QA_2")
    params:
        Lineage = config["LINEAGE"],
        SP = config["SP"]
    conda:
        "QAssembly.yml"
    threads: 20
    script:
        "QAssembly.py"



rule Piloning:	
    input:
        config["Sdatadir"],
        config["Ldatadir"]+"/Assemblies/Medaka_Results/consensus.fasta"
    output:
        directory(config["Ldatadir"]+"/Assemblies/Pilon_Results")
    params:
        Lineage = config["LINEAGE"],
        SP = config["SP"],
	XMX = config["XMX"]
    conda:
        "Piloning.yml"
    threads: 20
    script:
        "Piloning.py"













